// <auto-generated />
using System;
using App.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20181223170126_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("App.DAL.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StoragePath");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("App.DAL.Entities.BacklogTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.Property<int?>("ProjectBacklogId");

                    b.Property<int>("RequirementId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBacklogId");

                    b.HasIndex("RequirementId");

                    b.ToTable("BacklogTask");
                });

            modelBuilder.Entity("App.DAL.Entities.BoardBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("App.DAL.Entities.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("App.DAL.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachmentsId");

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentsId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("App.DAL.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("App.DAL.Entities.ConstraintRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BoardBaseId");

                    b.Property<int?>("ColumnId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("BoardBaseId");

                    b.HasIndex("ColumnId");

                    b.HasIndex("TaskId");

                    b.ToTable("ConstraintRecord");
                });

            modelBuilder.Entity("App.DAL.Entities.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Identifier")
                        .IsRequired();

                    b.Property<int?>("OwnerId");

                    b.Property<string>("Source")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("App.DAL.Entities.Cooperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("EndOfCooperation");

                    b.Property<int>("MemberId");

                    b.Property<DateTime>("StartOfCooperation");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MemberId");

                    b.ToTable("Cooperation");
                });

            modelBuilder.Entity("App.DAL.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("History");
                });

            modelBuilder.Entity("App.DAL.Entities.HistoryPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Event")
                        .IsRequired();

                    b.Property<int>("HistoryId");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("HistoryPoint");
                });

            modelBuilder.Entity("App.DAL.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BoardId");

                    b.Property<string>("Name");

                    b.Property<int?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("TaskId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("App.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BacklogId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProjectRootId");

                    b.Property<int>("RequirementListId");

                    b.HasKey("Id");

                    b.HasIndex("BacklogId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectRootId");

                    b.HasIndex("RequirementListId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("App.DAL.Entities.ProjectBacklog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ProjectBacklog");
                });

            modelBuilder.Entity("App.DAL.Entities.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Priority");

                    b.Property<int>("RequirementListId");

                    b.HasKey("Id");

                    b.HasIndex("RequirementListId");

                    b.ToTable("Requirement");
                });

            modelBuilder.Entity("App.DAL.Entities.RequirementList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("RequirementList");
                });

            modelBuilder.Entity("App.DAL.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssigneeId");

                    b.Property<int>("BacklogTaskId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("ColumnId");

                    b.Property<string>("Description");

                    b.Property<int>("HistoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("BacklogTaskId");

                    b.HasIndex("ColumnId");

                    b.HasIndex("HistoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("App.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("App.DAL.Entities.Teams2Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MemberId");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("Teams2Users");
                });

            modelBuilder.Entity("App.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fullname")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.DAL.Entities.BacklogTask", b =>
                {
                    b.HasOne("App.DAL.Entities.ProjectBacklog")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectBacklogId");

                    b.HasOne("App.DAL.Entities.Requirement", "Requirement")
                        .WithMany("Tasks")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.BoardBase", b =>
                {
                    b.HasOne("App.DAL.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Column", b =>
                {
                    b.HasOne("App.DAL.Entities.BoardBase", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Comment", b =>
                {
                    b.HasOne("App.DAL.Entities.Attachment", "Attachments")
                        .WithMany()
                        .HasForeignKey("AttachmentsId");

                    b.HasOne("App.DAL.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.ConstraintRecord", b =>
                {
                    b.HasOne("App.DAL.Entities.BoardBase")
                        .WithMany("Constraints")
                        .HasForeignKey("BoardBaseId");

                    b.HasOne("App.DAL.Entities.Column")
                        .WithMany("Constraints")
                        .HasForeignKey("ColumnId");

                    b.HasOne("App.DAL.Entities.Task", "Task")
                        .WithMany("Constraints")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("App.DAL.Entities.ContactInfo", b =>
                {
                    b.HasOne("App.DAL.Entities.User", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("App.DAL.Entities.Cooperation", b =>
                {
                    b.HasOne("App.DAL.Entities.Company", "Company")
                        .WithMany("Cooperations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.User", "Member")
                        .WithMany("CompanyCooperations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.HistoryPoint", b =>
                {
                    b.HasOne("App.DAL.Entities.History", "History")
                        .WithMany("Events")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Label", b =>
                {
                    b.HasOne("App.DAL.Entities.BoardBase", "Board")
                        .WithMany("Labels")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Task")
                        .WithMany("Labels")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("App.DAL.Entities.Project", b =>
                {
                    b.HasOne("App.DAL.Entities.ProjectBacklog", "Backlog")
                        .WithOne("Project")
                        .HasForeignKey("App.DAL.Entities.Project", "BacklogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.User", "ProjectRoot")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectRootId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.RequirementList", "RequirementList")
                        .WithOne("Project")
                        .HasForeignKey("App.DAL.Entities.Project", "RequirementListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Requirement", b =>
                {
                    b.HasOne("App.DAL.Entities.RequirementList", "RequirementList")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Task", b =>
                {
                    b.HasOne("App.DAL.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.BacklogTask", "BacklogTask")
                        .WithMany()
                        .HasForeignKey("BacklogTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Column", "Column")
                        .WithMany("Tasks")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.History", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Team", b =>
                {
                    b.HasOne("App.DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.DAL.Entities.Teams2Users", b =>
                {
                    b.HasOne("App.DAL.Entities.User", "Member")
                        .WithMany("TeamUserPairs")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.DAL.Entities.Team", "Team")
                        .WithMany("TeamUserPairs")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
